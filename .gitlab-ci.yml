stages:
  - build
  - test
  - upload
  - release

default:
  interruptible: true

variables:
  # Enable coloured output from CMake (https://bixense.com/clicolors/)
  CLICOLOR_FORCE: 1

  # This is necessary for wprintf() to be able to output Unicode (non-ASCII) characters
  LANG: en_US.UTF-8

  PERLANG_ROOT: $CI_PROJECT_DIR
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/releases"

build-perlang-cli:
  stage: test

  image: docker.perlang.org/perlang/docker-images/ci/dotnet:8.0
  script:
    # First, install the latest 'nightly' snapshot and build Perlang CLI one time. This ensures that the latest nightly
    # "works" at least as far as producing some output is concerned.
    - scripts/perlang-install
    - make perlang_cli_clean perlang_cli

    # Then, build the rest of the Perlang compiler and install it in-place of the existing 'nightly' snapshot. Once this
    # is done, rebuild the Perlang CLI one more time. This ensures that the current commit can produce some output.
    - make install
    - make perlang_cli_clean perlang_cli

    # Finally, ensure that the generated C++ is identical to the file(s) in the repo. These should never diff; if they
    # do, the developer must run the given command locally and commit the changes.
    - 'git diff --quiet || (echo -e "\e[38;5;196mERROR:\e[0m You seem to have forgotten to regenerate the following C++ file(s) from Perlang sources. Run make perlang_cli_clean perlang_cli to regenerate it/them." && git diff --color=always && exit 1)'

  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Special job which builds and tests all parts of Perlang which are currently platform-independent on FreeBSD.
build-freebsd:
  stage: test
  tags:
    - freebsd

  script:
    # "Fake it till you make it". This is necessary to avoid failures trying to regenerate our .cc file if the .per files
    # have a more recent timestamp.
    - mkdir -p ~/.perlang/nightly/bin
    - cp $(which true) ~/.perlang/nightly/bin/perlang

    - gmake perlang_cli
    - gmake stdlib
    - gmake test-perlang-cli EXTRA_CATCH_REPORTER="--reporter JUnit::out=native-stdlib-junit-log.xml";
    - gmake test-stdlib EXTRA_CATCH_REPORTER="--reporter JUnit::out=native-stdlib-junit-log.xml";
  artifacts:
    when: always
    paths:
      - native-stdlib-junit-log.xml
    reports:
      junit:
        - native-stdlib-junit-log.xml

  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Special job which builds and tests all parts of Perlang which are currently platform-independent on NetBSD.
build-netbsd:
  stage: test
  tags:
    - netbsd

  script:
    # "Fake it till you make it". This is necessary to avoid failures trying to regenerate our .cc file if the .per files
    # have a more recent timestamp.
    - mkdir -p ~/.perlang/nightly/bin
    - cp $(which true) ~/.perlang/nightly/bin/perlang

    - gmake perlang_cli
    - gmake stdlib
    - gmake test-perlang-cli EXTRA_CATCH_REPORTER="--reporter JUnit::out=native-stdlib-junit-log.xml";
    - gmake test-stdlib EXTRA_CATCH_REPORTER="--reporter JUnit::out=native-stdlib-junit-log.xml";
  artifacts:
    when: always
    paths:
      - native-stdlib-junit-log.xml
    reports:
      junit:
        - native-stdlib-junit-log.xml

  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Special job which builds and tests all parts of Perlang which are currently platform-independent on OpenBSD.
build-openbsd:
  stage: test
  tags:
    - openbsd

  script:
    # "Fake it till you make it". This is necessary to avoid failures trying to regenerate our .cc file if the .per
    # files have a more recent timestamp.
    - mkdir -p ~/.perlang/nightly/bin
    - cp $(which true) ~/.perlang/nightly/bin/perlang

    - gmake perlang_cli
    - gmake stdlib
    - gmake test-perlang-cli EXTRA_CATCH_REPORTER="--reporter JUnit::out=native-stdlib-junit-log.xml";
    - gmake test-stdlib EXTRA_CATCH_REPORTER="--reporter JUnit::out=native-stdlib-junit-log.xml";
  artifacts:
    when: always
    paths:
      - native-stdlib-junit-log.xml
    reports:
      junit:
        - native-stdlib-junit-log.xml

  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Initial Valgrind CI job, until we have even more extensive Valgrind coverage. This will at least cover the most
# obvious violations triggered by perlang_cli.
#
# Note: in contrast to other CI jobs which set PERLANG_RUN_WITH_VALGRIND, this job runs the Perlang *compilation* with
# Valgrind enabled, rather than the execution of the actual compiled result. In practice, this means that it's the .NET
# runtime that is executed with Valgrind which means different environment variables and Valgrind flags need to be set,
# for reasons mentioned in the Makefile.
valgrind-run-hello-world-example:
  stage: test
  needs: []

  image: docker.perlang.org/perlang/docker-images/ci/dotnet:8.0
  script:
    # "Fake it till you make it". This is necessary to avoid failures trying to regenerate our .cc file if the .per
    # files have a more recent timestamp.
    - mkdir -p ~/.perlang/nightly/bin
    - cp $(which true) ~/.perlang/nightly/bin/perlang

    - make stdlib
    - make valgrind-perlang-run-hello-world-example
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

test:
  stage: test
  needs: []

  parallel:
    matrix:
      - TEST_MODE: ['valgrind', '']

  # TODO: Run on other operating systems too, when we are ready for it. It's
  # probably not worth it until we are a proper LLVM language, independent
  # of clang for generating binaries.
  image: docker.perlang.org/perlang/docker-images/ci/dotnet:8.0
  script:
    # The .per files in src/perlang_cli can sometimes be more recent than the generated .cc file, in a git checkout.
    # This will cause 'make' to try to regenerate these files. We don't want this to happen in this CI job; we have
    # other jobs which catches this if it happens.
    - mkdir -p ~/.perlang/nightly/bin
    - cp $(which true) ~/.perlang/nightly/bin/perlang

    - make auto-generated
    - make stdlib
    - make perlang_cli_install_integration_test_release
    - >
        if [[ "$TEST_MODE" == 'valgrind' ]]; then
          PERLANG_RUN_WITH_VALGRIND=true dotnet test --configuration Release --verbosity minimal --logger "junit;LogFilePath=junit-log.xml";
          make valgrind-test-stdlib;
        else
          dotnet test --configuration Release --verbosity minimal --logger "junit;LogFilePath=junit-log.xml";
          make test-stdlib EXTRA_CATCH_REPORTER="--reporter JUnit::out=native-stdlib-junit-log.xml";
        fi
  artifacts:
    when: always
    paths:
      - native-stdlib-junit-log.xml
      - src/Perlang.Tests.Integration/junit-log.xml
      - src/Perlang.Tests/junit-log.xml
      - src/Perlang.Tests.Architecture/junit-log.xml
    reports:
      junit:
        - native-stdlib-junit-log.xml
        - src/Perlang.Tests.Integration/junit-log.xml
        - src/Perlang.Tests/junit-log.xml
        - src/Perlang.Tests.Architecture/junit-log.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

docs-test-examples:
  stage: test
  needs: []

  image: docker.perlang.org/perlang/docker-images/ci/dotnet:8.0
  script:
    #
    # Technically, this part is very different from the other part which
    # rebuilds the website. The reason for doing this is two-fold:
    #
    # 1) We want to ensure that the examples work, with the current (master)
    #    version of Perlang. Executing the examples with the newly built
    #    interpreter is the easiest way to accomplish this.
    #
    # 2) We want to ensure that a release build of Perlang actually _works_
    #    and can run a Perlang script at all. There has been bugs (#199, I'm
    #    looking at you!) where the release builds have been so badly broken
    #    that _all_ scripts were broken. By specifically making a _release_
    #    build here (which is self-contained and R2R-enhanced), we can help
    #    prevent regressions in this area with very little extra work.
    #
    - make auto-generated
    - dotnet publish src/Perlang.ConsoleApp/Perlang.ConsoleApp.csproj -c Release -r linux-x64 --self-contained true /p:PublishReadyToRun=true /p:SolutionDir=$(pwd)/
    - make stdlib && cp -rv lib src/Perlang.ConsoleApp/bin/Release/net8.0/linux-x64/publish

    # "Fake it till you make it". This is necessary to avoid failures trying
    # to regenerate our .cc file if the .per files have a more
    # recent timestamp.
    - mkdir -p ~/.perlang/nightly/bin
    - cp $(which true) ~/.perlang/nightly/bin/perlang

    # Ensure examples execute without errors
    - make docs-test-examples SHELL="sh -x -e"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# The 'binaries', 'upload-binaries' and 'release' jobs are heavily inspired by the approach taken by the aws fleeting
# plugin:
# https://gitlab.com/gitlab-org/fleeting/plugins/aws/-/blob/7328e430d0ce9896770417d8cd7317f66342cbc0/.gitlab/ci/release.gitlab-ci.yml
binaries:
  stage: build
  image: docker.perlang.org/perlang/docker-images/ci/dotnet:8.0
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
  script:
    - export PROJECT_ROOT_DIR=$(pwd)
    - mkdir -p out/

    - make auto-generated
    - dotnet build

    # Required for the 'perlang -v' call to succeed
    - make perlang_cli_install_debug

    # Must avoid exporting in the same line as the command, because otherwise the command will never fail (even if
    # executing the perlang binary fails)
    - PERLANG_VERSION=$(src/Perlang.ConsoleApp/bin/Debug/net8.0/perlang -v)
    - export PERLANG_VERSION

    # Compile .NET and native libraries
    - dotnet publish src/Perlang.ConsoleApp/Perlang.ConsoleApp.csproj -c Release -r $ARCH --self-contained true /p:PublishReadyToRun=true /p:SolutionDir=$(pwd)/
    - make stdlib && cp -rv lib src/Perlang.ConsoleApp/bin/Release/net8.0/$ARCH/publish
    - make perlang_cli && cp lib/perlang_cli/lib/perlang_cli.so src/Perlang.ConsoleApp/bin/Release/net8.0/$ARCH/publish

    # Create an archive from the compiled binaries
    - (pushd src/Perlang.ConsoleApp/bin/Release/net8.0/$ARCH/publish && tar cvzf ${PROJECT_ROOT_DIR}/out/perlang-${PERLANG_VERSION}-$ARCH.tar.gz *)
    - ls -l out/*.tar.gz
  artifacts:
    paths:
      - out/*.tar.gz
    expire_in: 30 days
  parallel:
    matrix:
      - ARCH:
          # Only one arch for now, until we are ready to add more. Note: once we have moved away from the .NET SDK
          # dependency for building Perlang, we should try utilizing Zig here since it means we can cross-compile the
          # C++-generated Perlang compiler for any zig-supported platform easily.
          - linux-x64
  needs: []

upload-binaries:
  stage: upload
  image: debian:bookworm
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
  dependencies:
    - binaries
  script:
    - apt-get update && apt-get install -y curl gnupg make
    - make upload-release
  environment:
    name: upload
  artifacts:
    paths:
      - manifest.txt

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  dependencies:
    - upload-binaries
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
  script:
    - apk add make bash curl
    - make create-gitlab-release
