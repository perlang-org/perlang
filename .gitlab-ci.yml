default:
  interruptible: true

variables:
  # Enable coloured output from CMake (https://bixense.com/clicolors/)
  CLICOLOR_FORCE: 1

  PERLANG_ROOT: $CI_PROJECT_DIR

build-perlang-cli:
  stage: build

  image: docker.perlang.org/perlang/docker-images/ci/dotnet:8.0
  script:
    - 'scripts/perlang-install'
    - 'make perlang_cli_clean perlang_cli'
    - 'git diff --quiet || (echo -e "\e[38;5;196mERROR:\e[0m You seem to have forgotten to regenerate the following C++ file(s) from Perlang sources:" && git diff --color=always && exit 1)'

  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Initial Valgrind CI job, until we have even more extensive Valgrind coverage. This will at least cover the most
# obvious violations triggered by perlang_cli.
#
# Note: in contrast to other CI jobs which set PERLANG_RUN_WITH_VALGRIND, this job runs the Perlang *compilation* with
# Valgrind enabled, rather than the execution of the actual compiled result. In practice, this means that it's the .NET
# runtime that is executed with Valgrind which means different environment variables and Valgrind flags need to be set,
# for reasons mentioned in the Makefile.
valgrind-run-hello-world-example:
  stage: test
  needs: []

  image: docker.perlang.org/perlang/docker-images/ci/dotnet:8.0
  script:
    - make stdlib
    - make valgrind-run-hello-world-example
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

test:
  stage: test
  needs: []

  parallel:
    matrix:
      - TEST_MODE: ['valgrind', '']

  # TODO: Run on other operating systems too, when we are ready for it. It's
  # probably not worth it until we are a proper LLVM language, independent
  # of clang for generating binaries.
  image: docker.perlang.org/perlang/docker-images/ci/dotnet:8.0
  script:
    - make auto-generated
    - make stdlib
    - >
        if [[ "$TEST_MODE" == 'valgrind' ]]; then
          PERLANG_RUN_WITH_VALGRIND=true dotnet test --configuration Release --verbosity minimal;
        else
          dotnet test --configuration Release --verbosity minimal;
        fi
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

docs-test-examples:
  stage: test
  needs: []

  image: docker.perlang.org/perlang/docker-images/ci/dotnet:8.0
  script:
    #
    # Technically, this part is very different from the other part which
    # rebuilds the website. The reason for doing this is two-fold:
    #
    # 1) We want to ensure that the examples work, with the current (master)
    #    version of Perlang. Executing the examples with the newly built
    #    interpreter is the easiest way to accomplish this.
    #
    # 2) We want to ensure that a release build of Perlang actually _works_
    #    and can run a Perlang script at all. There has been bugs (#199, I'm
    #    looking at you!) where the release builds have been so badly broken
    #    that _all_ scripts were broken. By specifically making a _release_
    #    build here (which is self-contained and R2R-enhanced), we can help
    #    prevent regressions in this area with very little extra work.
    #
    - make auto-generated
    - dotnet publish src/Perlang.ConsoleApp/Perlang.ConsoleApp.csproj -c Release -r linux-x64 --self-contained true /p:PublishReadyToRun=true /p:SolutionDir=$(pwd)/
    - make stdlib && cp -rv lib src/Perlang.ConsoleApp/bin/Release/net8.0/linux-x64/publish

    # Ensure examples execute without errors
    - make docs-test-examples SHELL="sh -x -e"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
