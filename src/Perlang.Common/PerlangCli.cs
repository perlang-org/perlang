// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

public unsafe partial class perlang_cli
{
    public partial struct __Internal
    {
        [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "native_main", CallingConvention = __CallingConvention.Cdecl)]
        internal static extern void NativeMain(int argc, sbyte** argv);

        [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_Z15perlang_versionv", CallingConvention = __CallingConvention.Cdecl)]
        internal static extern void PerlangVersion();

        [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_Z24perlang_detailed_versionv", CallingConvention = __CallingConvention.Cdecl)]
        internal static extern void PerlangDetailedVersion();
    }

    public static void NativeMain(int argc, sbyte** argv)
    {
        __Internal.NativeMain(argc, argv);
    }

    public static void PerlangVersion()
    {
        __Internal.PerlangVersion();
    }

    public static void PerlangDetailedVersion()
    {
        __Internal.PerlangDetailedVersion();
    }
}

namespace Perlang
{
    public enum Visibility : uint
    {
        Public = 0
    }
}

namespace Perlang
{
    public enum TokenType : uint
    {
        LEFT_PAREN = 0,
        RIGHT_PAREN = 1,
        LEFT_BRACE = 2,
        RIGHT_BRACE = 3,
        LEFT_SQUARE_BRACKET = 4,
        RIGHT_SQUARE_BRACKET = 5,
        COMMA = 6,
        DOT = 7,
        MINUS = 8,
        PLUS = 9,
        PERCENT = 10,
        SINGLE_QUOTE = 11,
        SEMICOLON = 12,
        COLON = 13,
        SLASH = 14,
        QUESTION_MARK = 15,
        CARET = 16,
        BANG = 17,
        BANG_EQUAL = 18,
        EQUAL = 19,
        EQUAL_EQUAL = 20,
        GREATER = 21,
        GREATER_EQUAL = 22,
        GREATER_GREATER = 23,
        LESS = 24,
        LESS_EQUAL = 25,
        LESS_LESS = 26,
        AMPERSAND = 27,
        AMPERSAND_AMPERSAND = 28,
        PIPE = 29,
        PIPE_PIPE = 30,
        PLUS_PLUS = 31,
        MINUS_MINUS = 32,
        PLUS_EQUAL = 33,
        MINUS_EQUAL = 34,
        STAR = 35,
        STAR_STAR = 36,
        IDENTIFIER = 37,
        STRING = 38,
        NUMBER = 39,
        PREPROCESSOR_DIRECTIVE_CPP_PROTOTYPES = 40,
        PREPROCESSOR_DIRECTIVE_CPP_METHODS = 41,
        CLASS = 42,
        CONSTRUCTOR = 43,
        DESTRUCTOR = 44,
        ELSE = 45,
        ENUM = 46,
        FALSE = 47,
        FUN = 48,
        FOR = 49,
        IF = 50,
        NEW = 51,
        PERLANG_NULL = 52,
        PRINT = 53,
        PUBLIC = 54,
        RETURN = 55,
        SUPER = 56,
        THIS = 57,
        TRUE = 58,
        VAR = 59,
        WHILE = 60,
        RESERVED_WORD = 61,
        PERLANG_EOF = 62
    }
}

namespace Perlang
{
}

namespace Perlang
{
    public unsafe partial class ASCIIString : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal __IntPtr vptr_String;
            internal global::Std.UniquePtr.__Internalc__N_std_S_unique_ptr__1_nC___N_std_S_default_delete__1S0_ bytes_;
            internal ulong length_;
            internal byte owned_;

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZNK7perlang11ASCIIStringeqERKS0_", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(__IntPtr __instance, __IntPtr rhs);

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZNK7perlang11ASCIIStringneERKS0_", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual(__IntPtr __instance, __IntPtr rhs);

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZNK7perlang11ASCIIStringixEm", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte OperatorSubscript(__IntPtr __instance, ulong index);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Perlang.ASCIIString> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Perlang.ASCIIString>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::Perlang.ASCIIString managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::Perlang.ASCIIString managed)
        {

            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static ASCIIString __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new ASCIIString(native.ToPointer(), skipVTables);
        }

        internal static ASCIIString __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ASCIIString)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ASCIIString __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (ASCIIString)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static ASCIIString __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ASCIIString(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ASCIIString(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected ASCIIString(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
            if (!skipVTables)
                SetupVTables(true);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (callNativeDtor)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::Delegates.Action___IntPtr>(0, 0);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public static bool operator ==(global::Perlang.ASCIIString __op, global::Perlang.ASCIIString rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return __opNull && rhsNull;
            var __arg0 = __op.__Instance;
            var __arg1 = rhs.__Instance;
            var ___ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
            return ___ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as global::Perlang.ASCIIString;
        }

        public override int GetHashCode()
        {
            if (__Instance == __IntPtr.Zero)
                return __IntPtr.Zero.GetHashCode();
            return (*(global::Perlang.ASCIIString.__Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(global::Perlang.ASCIIString __op, global::Perlang.ASCIIString rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return !(__opNull && rhsNull);
            var __arg0 = __op.__Instance;
            var __arg1 = rhs.__Instance;
            var ___ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
            return ___ret;
        }

        public sbyte this[ulong index]
        {
            get
            {
                var ___ret = __Internal.OperatorSubscript(__Instance, index);
                return ___ret;
            }
        }

        #region Virtual table interop

        // ~ASCIIString() override
        private static global::Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::Perlang.ASCIIString.__GetInstance(__instance);
            __target.Dispose(disposing: true, callNativeDtor: true);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 17, 2);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 17, 2);
                            ManagedVTables[0][1] = Thunks[0];
                            VTables.Methods[0] = new Delegate[17];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Perlang
{
    public unsafe partial class UTF8String : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 40)]
        public partial struct __Internal
        {
            internal __IntPtr vptr_String;
            internal global::Std.UniquePtr.__Internalc__N_std_S_unique_ptr__1_nC___N_std_S_default_delete__1S0_ bytes_;
            internal ulong length_;
            internal byte owned_;
            internal global::Std.UniquePtr.__Internalc__N_std_S_unique_ptr__b___N_std_S_default_delete__b is_ascii_;

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZNK7perlang10UTF8StringeqERKS0_", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(__IntPtr __instance, __IntPtr rhs);

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZNK7perlang10UTF8StringneERKS0_", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual(__IntPtr __instance, __IntPtr rhs);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Perlang.UTF8String> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Perlang.UTF8String>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::Perlang.UTF8String managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::Perlang.UTF8String managed)
        {

            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static UTF8String __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new UTF8String(native.ToPointer(), skipVTables);
        }

        internal static UTF8String __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (UTF8String)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static UTF8String __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (UTF8String)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static UTF8String __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new UTF8String(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private UTF8String(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected UTF8String(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
            if (!skipVTables)
                SetupVTables(true);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (callNativeDtor)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::Delegates.Action___IntPtr>(0, 0);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public static bool operator ==(global::Perlang.UTF8String __op, global::Perlang.UTF8String rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return __opNull && rhsNull;
            var __arg0 = __op.__Instance;
            var __arg1 = rhs.__Instance;
            var ___ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
            return ___ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as global::Perlang.UTF8String;
        }

        public override int GetHashCode()
        {
            if (__Instance == __IntPtr.Zero)
                return __IntPtr.Zero.GetHashCode();
            return (*(global::Perlang.UTF8String.__Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(global::Perlang.UTF8String __op, global::Perlang.UTF8String rhs)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (__opNull || rhsNull)
                return !(__opNull && rhsNull);
            var __arg0 = __op.__Instance;
            var __arg1 = rhs.__Instance;
            var ___ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
            return ___ret;
        }

        #region Virtual table interop

        // ~UTF8String() override
        private static global::Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::Perlang.UTF8String.__GetInstance(__instance);
            __target.Dispose(disposing: true, callNativeDtor: true);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 17, 2);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 17, 2);
                            ManagedVTables[0][1] = Thunks[0];
                            VTables.Methods[0] = new Delegate[17];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Perlang
{
    public unsafe partial class IntArray : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal __IntPtr arr_;
            internal ulong length_;
            internal byte owned_;

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN7perlang8IntArrayC2ERKS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN7perlang8IntArrayD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZNK7perlang8IntArrayixEm", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OperatorSubscript(__IntPtr __instance, ulong index);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Perlang.IntArray> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Perlang.IntArray>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::Perlang.IntArray managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::Perlang.IntArray managed)
        {

            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IntArray __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IntArray(native.ToPointer(), skipVTables);
        }

        internal static IntArray __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IntArray)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IntArray __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IntArray(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IntArray(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected IntArray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public IntArray(global::Perlang.IntArray _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Perlang.IntArray.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::Perlang.IntArray.__Internal*) __Instance) = *((global::Perlang.IntArray.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int this[ulong index]
        {
            get
            {
                var ___ret = __Internal.OperatorSubscript(__Instance, index);
                return ___ret;
            }
        }
    }
}

namespace Perlang
{
    public unsafe partial class StringArray : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal __IntPtr arr_;
            internal ulong length_;
            internal byte owned_;

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN7perlang11StringArrayC2ERKS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN7perlang11StringArrayD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZNK7perlang11StringArray6lengthEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong Length(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Perlang.StringArray> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Perlang.StringArray>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::Perlang.StringArray managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::Perlang.StringArray managed)
        {

            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static StringArray __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new StringArray(native.ToPointer(), skipVTables);
        }

        internal static StringArray __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (StringArray)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static StringArray __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new StringArray(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StringArray(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected StringArray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public StringArray(global::Perlang.StringArray _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Perlang.StringArray.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::Perlang.StringArray.__Internal*) __Instance) = *((global::Perlang.StringArray.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Length
        {
            get
            {
                var ___ret = __Internal.Length(__Instance);
                return ___ret;
            }
        }
    }
}

namespace Perlang
{
    namespace Io
    {
        public unsafe partial class File : IDisposable
        {
            [StructLayout(LayoutKind.Sequential, Size = 1)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN7perlang2io4FileC2ERKS1_", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
            }

            public __IntPtr __Instance { get; protected set; }

            internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Perlang.Io.File> NativeToManagedMap =
                new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Perlang.Io.File>();

            internal static void __RecordNativeToManagedMapping(IntPtr native, global::Perlang.Io.File managed)
            {
                NativeToManagedMap[native] = managed;
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::Perlang.Io.File managed)
            {

                return NativeToManagedMap.TryGetValue(native, out managed);
            }

            protected bool __ownsNativeInstance;

            internal static File __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new File(native.ToPointer(), skipVTables);
            }

            internal static File __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (File)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static File __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new File(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*) ret = native;
                return ret.ToPointer();
            }

            private File(__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected File(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new __IntPtr(native);
            }

            public File()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::Perlang.Io.File.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            public File(global::Perlang.Io.File _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::Perlang.Io.File.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                *((global::Perlang.Io.File.__Internal*) __Instance) = *((global::Perlang.Io.File.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            }

            partial void DisposePartial(bool disposing);

            internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
            {
                if (__Instance == IntPtr.Zero)
                    return;
                NativeToManagedMap.TryRemove(__Instance, out _);
                DisposePartial(disposing);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }
        }
    }
}

namespace Perlang
{
    namespace Text
    {
        public unsafe partial class StringBuilder : IDisposable
        {
            [StructLayout(LayoutKind.Sequential, Size = 32)]
            public partial struct __Internal
            {
                internal uint DEFAULT_BUFFER_SIZE;
                internal __IntPtr buffer_;
                internal uint buffer_capacity_;
                internal uint current_position_;
                internal uint length_;

                [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN7perlang4text13StringBuilderC2Ev", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void ctor(__IntPtr __instance);

                [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN7perlang4text13StringBuilderC2ERKS1_", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

                [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN7perlang4text13StringBuilderD2Ev", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void dtor(__IntPtr __instance);

                [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZNK7perlang4text13StringBuilder6lengthEv", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern uint Length(__IntPtr __instance);
            }

            public __IntPtr __Instance { get; protected set; }

            internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Perlang.Text.StringBuilder> NativeToManagedMap =
                new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Perlang.Text.StringBuilder>();

            internal static void __RecordNativeToManagedMapping(IntPtr native, global::Perlang.Text.StringBuilder managed)
            {
                NativeToManagedMap[native] = managed;
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::Perlang.Text.StringBuilder managed)
            {

                return NativeToManagedMap.TryGetValue(native, out managed);
            }

            protected bool __ownsNativeInstance;

            internal static StringBuilder __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new StringBuilder(native.ToPointer(), skipVTables);
            }

            internal static StringBuilder __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (StringBuilder)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static StringBuilder __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new StringBuilder(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*) ret = native;
                return ret.ToPointer();
            }

            private StringBuilder(__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected StringBuilder(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new __IntPtr(native);
            }

            public StringBuilder()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::Perlang.Text.StringBuilder.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                __Internal.ctor(__Instance);
            }

            public StringBuilder(global::Perlang.Text.StringBuilder _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::Perlang.Text.StringBuilder.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                *((global::Perlang.Text.StringBuilder.__Internal*) __Instance) = *((global::Perlang.Text.StringBuilder.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            }

            partial void DisposePartial(bool disposing);

            internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
            {
                if (__Instance == IntPtr.Zero)
                    return;
                NativeToManagedMap.TryRemove(__Instance, out _);
                DisposePartial(disposing);
                if (callNativeDtor)
                    __Internal.dtor(__Instance);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public uint Length
            {
                get
                {
                    var ___ret = __Internal.Length(__Instance);
                    return ___ret;
                }
            }
        }
    }
}

namespace Perlang
{
    public unsafe partial class perlang_stdlib
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN7perlang5printERKNS_11ASCIIStringE", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Print(__IntPtr str);

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN7perlang5printEb", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Print(bool b);

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN7perlang5printEc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Print_1(sbyte c);

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN7perlang5printEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Print_2(int i);

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN7perlang5printEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Print_3(uint u);

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN7perlang5printEl", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Print_4(long i);

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN7perlang5printEm", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Print_5(ulong i);

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN7perlang5printEf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Print_6(float f);

            [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN7perlang5printEd", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Print_7(double d);
        }

        public static void Print(global::Perlang.ASCIIString str)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = str.__Instance;
            __Internal.Print(__arg0);
        }

        public static void Print(bool b)
        {
            __Internal.Print(b);
        }

        public static void Print(sbyte c)
        {
            __Internal.Print_1(c);
        }

        public static void Print(int i)
        {
            __Internal.Print_2(i);
        }

        public static void Print(uint u)
        {
            __Internal.Print_3(u);
        }

        public static void Print(long i)
        {
            __Internal.Print_4(i);
        }

        public static void Print(ulong i)
        {
            __Internal.Print_5(i);
        }

        public static void Print(float f)
        {
            __Internal.Print_6(f);
        }

        public static void Print(double d)
        {
            __Internal.Print_7(d);
        }
    }

    namespace Stdlib
    {
        public unsafe partial class Base64 : IDisposable
        {
            [StructLayout(LayoutKind.Sequential, Size = 1)]
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN7perlang6stdlib6Base64C2ERKS1_", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
            }

            public __IntPtr __Instance { get; protected set; }

            internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Perlang.Stdlib.Base64> NativeToManagedMap =
                new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Perlang.Stdlib.Base64>();

            internal static void __RecordNativeToManagedMapping(IntPtr native, global::Perlang.Stdlib.Base64 managed)
            {
                NativeToManagedMap[native] = managed;
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::Perlang.Stdlib.Base64 managed)
            {

                return NativeToManagedMap.TryGetValue(native, out managed);
            }

            protected bool __ownsNativeInstance;

            internal static Base64 __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new Base64(native.ToPointer(), skipVTables);
            }

            internal static Base64 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (Base64)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static Base64 __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new Base64(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Base64(__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected Base64(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new __IntPtr(native);
            }

            public Base64()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::Perlang.Stdlib.Base64.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            public Base64(global::Perlang.Stdlib.Base64 _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::Perlang.Stdlib.Base64.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                *((global::Perlang.Stdlib.Base64.__Internal*) __Instance) = *((global::Perlang.Stdlib.Base64.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            }

            partial void DisposePartial(bool disposing);

            internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
            {
                if (__Instance == IntPtr.Zero)
                    return;
                NativeToManagedMap.TryRemove(__Instance, out _);
                DisposePartial(disposing);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }
        }
    }
}

public unsafe partial class StringTokenTypeDictionary : IDisposable
{
    [StructLayout(LayoutKind.Sequential, Size = 136)]
    public partial struct __Internal
    {
        internal global::Tsl.OrderedMap.__Internalc__N_tsl_S_ordered_map____N_std_S_shared_ptr____N_perlang_S_String___N_TokenType_E_TokenType___S_string_hasher___S_string_comparer___N_std_S_allocator____N_std_S_pair__S0__S2____N_std_S_deque__S6__S5__i data_;

        [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN25StringTokenTypeDictionaryC2ER32MutableStringTokenTypeDictionary", CallingConvention = __CallingConvention.Cdecl)]
        internal static extern void ctor(__IntPtr __instance, __IntPtr _0);

        [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN25StringTokenTypeDictionaryC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
        internal static extern void cctor_1(__IntPtr __instance, __IntPtr _0);

        [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN25StringTokenTypeDictionaryD2Ev", CallingConvention = __CallingConvention.Cdecl)]
        internal static extern void dtor(__IntPtr __instance);

        [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN25StringTokenTypeDictionary12contains_keyEPKc", CallingConvention = __CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.I1)]
        internal static extern bool ContainsKey(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string _0);

        [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN25StringTokenTypeDictionary3getEPKc", CallingConvention = __CallingConvention.Cdecl)]
        internal static extern global::Perlang.TokenType Get(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string _0);
    }

    public __IntPtr __Instance { get; protected set; }

    internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::StringTokenTypeDictionary> NativeToManagedMap =
        new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::StringTokenTypeDictionary>();

    internal static void __RecordNativeToManagedMapping(IntPtr native, global::StringTokenTypeDictionary managed)
    {
        NativeToManagedMap[native] = managed;
    }

    internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::StringTokenTypeDictionary managed)
    {

        return NativeToManagedMap.TryGetValue(native, out managed);
    }

    protected bool __ownsNativeInstance;

    internal static global::StringTokenTypeDictionary __CreateInstance(__IntPtr native, bool skipVTables = false)
    {
        if (native == __IntPtr.Zero)
            return null;
        return new global::StringTokenTypeDictionary(native.ToPointer(), skipVTables);
    }

    internal static global::StringTokenTypeDictionary __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
    {
        if (native == __IntPtr.Zero)
            return null;
        if (__TryGetNativeToManagedMapping(native, out var managed))
            return (global::StringTokenTypeDictionary)managed;
        var result = __CreateInstance(native, skipVTables);
        if (saveInstance)
            __RecordNativeToManagedMapping(native, result);
        return result;
    }

    internal static global::StringTokenTypeDictionary __CreateInstance(__Internal native, bool skipVTables = false)
    {
        return new global::StringTokenTypeDictionary(native, skipVTables);
    }

    private static void* __CopyValue(__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(__Internal));
        global::StringTokenTypeDictionary.__Internal.cctor_1(ret, new __IntPtr(&native));
        return ret.ToPointer();
    }

    private StringTokenTypeDictionary(__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        __RecordNativeToManagedMapping(__Instance, this);
    }

    protected StringTokenTypeDictionary(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new __IntPtr(native);
    }

    public StringTokenTypeDictionary(global::MutableStringTokenTypeDictionary _0)
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::StringTokenTypeDictionary.__Internal));
        __ownsNativeInstance = true;
        __RecordNativeToManagedMapping(__Instance, this);
        if (ReferenceEquals(_0, null))
            throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
        var __arg0 = _0.__Instance;
        __Internal.ctor(__Instance, __arg0);
    }

    public StringTokenTypeDictionary(global::StringTokenTypeDictionary _0)
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::StringTokenTypeDictionary.__Internal));
        __ownsNativeInstance = true;
        __RecordNativeToManagedMapping(__Instance, this);
        if (ReferenceEquals(_0, null))
            throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
        var __arg0 = _0.__Instance;
        __Internal.cctor_1(__Instance, __arg0);
    }

    public void Dispose()
    {
        Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
    }

    partial void DisposePartial(bool disposing);

    internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
    {
        if (__Instance == IntPtr.Zero)
            return;
        NativeToManagedMap.TryRemove(__Instance, out _);
        DisposePartial(disposing);
        if (callNativeDtor)
            __Internal.dtor(__Instance);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public bool ContainsKey(string _0)
    {
        var ___ret = __Internal.ContainsKey(__Instance, _0);
        return ___ret;
    }

    public global::Perlang.TokenType Get(string _0)
    {
        var ___ret = __Internal.Get(__Instance, _0);
        return ___ret;
    }

    public static implicit operator global::StringTokenTypeDictionary(global::MutableStringTokenTypeDictionary _0)
    {
        return new global::StringTokenTypeDictionary(_0);
    }
}

namespace Tsl
{
    namespace DetailOrderedHash
    {
    }
}

namespace Tsl
{
}

public unsafe partial class StringHasher : IDisposable
{
    [StructLayout(LayoutKind.Sequential, Size = 1)]
    public partial struct __Internal
    {
        [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN13string_hasherC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
        internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
    }

    public __IntPtr __Instance { get; protected set; }

    internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::StringHasher> NativeToManagedMap =
        new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::StringHasher>();

    internal static void __RecordNativeToManagedMapping(IntPtr native, global::StringHasher managed)
    {
        NativeToManagedMap[native] = managed;
    }

    internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::StringHasher managed)
    {

        return NativeToManagedMap.TryGetValue(native, out managed);
    }

    protected bool __ownsNativeInstance;

    internal static global::StringHasher __CreateInstance(__IntPtr native, bool skipVTables = false)
    {
        if (native == __IntPtr.Zero)
            return null;
        return new global::StringHasher(native.ToPointer(), skipVTables);
    }

    internal static global::StringHasher __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
    {
        if (native == __IntPtr.Zero)
            return null;
        if (__TryGetNativeToManagedMapping(native, out var managed))
            return (global::StringHasher)managed;
        var result = __CreateInstance(native, skipVTables);
        if (saveInstance)
            __RecordNativeToManagedMapping(native, result);
        return result;
    }

    internal static global::StringHasher __CreateInstance(__Internal native, bool skipVTables = false)
    {
        return new global::StringHasher(native, skipVTables);
    }

    private static void* __CopyValue(__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(__Internal));
        *(__Internal*) ret = native;
        return ret.ToPointer();
    }

    private StringHasher(__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        __RecordNativeToManagedMapping(__Instance, this);
    }

    protected StringHasher(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new __IntPtr(native);
    }

    public StringHasher()
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::StringHasher.__Internal));
        __ownsNativeInstance = true;
        __RecordNativeToManagedMapping(__Instance, this);
    }

    public StringHasher(global::StringHasher _0)
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::StringHasher.__Internal));
        __ownsNativeInstance = true;
        __RecordNativeToManagedMapping(__Instance, this);
        *((global::StringHasher.__Internal*) __Instance) = *((global::StringHasher.__Internal*) _0.__Instance);
    }

    public void Dispose()
    {
        Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
    }

    partial void DisposePartial(bool disposing);

    internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
    {
        if (__Instance == IntPtr.Zero)
            return;
        NativeToManagedMap.TryRemove(__Instance, out _);
        DisposePartial(disposing);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }
}

public unsafe partial class StringComparer : IDisposable
{
    [StructLayout(LayoutKind.Sequential, Size = 1)]
    public partial struct __Internal
    {
        [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN15string_comparerC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
        internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
    }

    public __IntPtr __Instance { get; protected set; }

    internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::StringComparer> NativeToManagedMap =
        new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::StringComparer>();

    internal static void __RecordNativeToManagedMapping(IntPtr native, global::StringComparer managed)
    {
        NativeToManagedMap[native] = managed;
    }

    internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::StringComparer managed)
    {

        return NativeToManagedMap.TryGetValue(native, out managed);
    }

    protected bool __ownsNativeInstance;

    internal static global::StringComparer __CreateInstance(__IntPtr native, bool skipVTables = false)
    {
        if (native == __IntPtr.Zero)
            return null;
        return new global::StringComparer(native.ToPointer(), skipVTables);
    }

    internal static global::StringComparer __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
    {
        if (native == __IntPtr.Zero)
            return null;
        if (__TryGetNativeToManagedMapping(native, out var managed))
            return (global::StringComparer)managed;
        var result = __CreateInstance(native, skipVTables);
        if (saveInstance)
            __RecordNativeToManagedMapping(native, result);
        return result;
    }

    internal static global::StringComparer __CreateInstance(__Internal native, bool skipVTables = false)
    {
        return new global::StringComparer(native, skipVTables);
    }

    private static void* __CopyValue(__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(__Internal));
        *(__Internal*) ret = native;
        return ret.ToPointer();
    }

    private StringComparer(__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        __RecordNativeToManagedMapping(__Instance, this);
    }

    protected StringComparer(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new __IntPtr(native);
    }

    public StringComparer()
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::StringComparer.__Internal));
        __ownsNativeInstance = true;
        __RecordNativeToManagedMapping(__Instance, this);
    }

    public StringComparer(global::StringComparer _0)
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::StringComparer.__Internal));
        __ownsNativeInstance = true;
        __RecordNativeToManagedMapping(__Instance, this);
        *((global::StringComparer.__Internal*) __Instance) = *((global::StringComparer.__Internal*) _0.__Instance);
    }

    public void Dispose()
    {
        Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
    }

    partial void DisposePartial(bool disposing);

    internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
    {
        if (__Instance == IntPtr.Zero)
            return;
        NativeToManagedMap.TryRemove(__Instance, out _);
        DisposePartial(disposing);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }
}

public unsafe partial class MutableStringTokenTypeDictionary : IDisposable
{
    [StructLayout(LayoutKind.Sequential, Size = 136)]
    public partial struct __Internal
    {
        internal global::Tsl.OrderedMap.__Internalc__N_tsl_S_ordered_map____N_std_S_shared_ptr____N_perlang_S_String___N_TokenType_E_TokenType___S_string_hasher___S_string_comparer___N_std_S_allocator____N_std_S_pair__S0__S2____N_std_S_deque__S6__S5__i data_;

        [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN32MutableStringTokenTypeDictionaryC2Ev", CallingConvention = __CallingConvention.Cdecl)]
        internal static extern void ctor(__IntPtr __instance);

        [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN32MutableStringTokenTypeDictionaryC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
        internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

        [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN32MutableStringTokenTypeDictionaryD2Ev", CallingConvention = __CallingConvention.Cdecl)]
        internal static extern void dtor(__IntPtr __instance);

        [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN32MutableStringTokenTypeDictionary3addEPKcN9TokenType9TokenTypeE", CallingConvention = __CallingConvention.Cdecl)]
        internal static extern void Add(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string _0, global::Perlang.TokenType _1);

        [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN32MutableStringTokenTypeDictionary12contains_keyEPKc", CallingConvention = __CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.I1)]
        internal static extern bool ContainsKey(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string _0);

        [SuppressUnmanagedCodeSecurity, DllImport("perlang_cli", EntryPoint = "_ZN32MutableStringTokenTypeDictionary3getEPKc", CallingConvention = __CallingConvention.Cdecl)]
        internal static extern global::Perlang.TokenType Get(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string _0);
    }

    public __IntPtr __Instance { get; protected set; }

    internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::MutableStringTokenTypeDictionary> NativeToManagedMap =
        new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::MutableStringTokenTypeDictionary>();

    internal static void __RecordNativeToManagedMapping(IntPtr native, global::MutableStringTokenTypeDictionary managed)
    {
        NativeToManagedMap[native] = managed;
    }

    internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::MutableStringTokenTypeDictionary managed)
    {

        return NativeToManagedMap.TryGetValue(native, out managed);
    }

    protected bool __ownsNativeInstance;

    internal static global::MutableStringTokenTypeDictionary __CreateInstance(__IntPtr native, bool skipVTables = false)
    {
        if (native == __IntPtr.Zero)
            return null;
        return new global::MutableStringTokenTypeDictionary(native.ToPointer(), skipVTables);
    }

    internal static global::MutableStringTokenTypeDictionary __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
    {
        if (native == __IntPtr.Zero)
            return null;
        if (__TryGetNativeToManagedMapping(native, out var managed))
            return (global::MutableStringTokenTypeDictionary)managed;
        var result = __CreateInstance(native, skipVTables);
        if (saveInstance)
            __RecordNativeToManagedMapping(native, result);
        return result;
    }

    internal static global::MutableStringTokenTypeDictionary __CreateInstance(__Internal native, bool skipVTables = false)
    {
        return new global::MutableStringTokenTypeDictionary(native, skipVTables);
    }

    private static void* __CopyValue(__Internal native)
    {
        var ret = Marshal.AllocHGlobal(sizeof(__Internal));
        global::MutableStringTokenTypeDictionary.__Internal.cctor(ret, new __IntPtr(&native));
        return ret.ToPointer();
    }

    private MutableStringTokenTypeDictionary(__Internal native, bool skipVTables = false)
        : this(__CopyValue(native), skipVTables)
    {
        __ownsNativeInstance = true;
        __RecordNativeToManagedMapping(__Instance, this);
    }

    protected MutableStringTokenTypeDictionary(void* native, bool skipVTables = false)
    {
        if (native == null)
            return;
        __Instance = new __IntPtr(native);
    }

    public MutableStringTokenTypeDictionary()
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::MutableStringTokenTypeDictionary.__Internal));
        __ownsNativeInstance = true;
        __RecordNativeToManagedMapping(__Instance, this);
        __Internal.ctor(__Instance);
    }

    public MutableStringTokenTypeDictionary(global::MutableStringTokenTypeDictionary _0)
    {
        __Instance = Marshal.AllocHGlobal(sizeof(global::MutableStringTokenTypeDictionary.__Internal));
        __ownsNativeInstance = true;
        __RecordNativeToManagedMapping(__Instance, this);
        if (ReferenceEquals(_0, null))
            throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
        var __arg0 = _0.__Instance;
        __Internal.cctor(__Instance, __arg0);
    }

    public void Dispose()
    {
        Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
    }

    partial void DisposePartial(bool disposing);

    internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
    {
        if (__Instance == IntPtr.Zero)
            return;
        NativeToManagedMap.TryRemove(__Instance, out _);
        DisposePartial(disposing);
        if (callNativeDtor)
            __Internal.dtor(__Instance);
        if (__ownsNativeInstance)
            Marshal.FreeHGlobal(__Instance);
        __Instance = IntPtr.Zero;
    }

    public void Add(string _0, global::Perlang.TokenType _1)
    {
        __Internal.Add(__Instance, _0, _1);
    }

    public bool ContainsKey(string _0)
    {
        var ___ret = __Internal.ContainsKey(__Instance, _0);
        return ___ret;
    }

    public global::Perlang.TokenType Get(string _0)
    {
        var ___ret = __Internal.Get(__Instance, _0);
        return ___ret;
    }
}

namespace Delegates
{
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    internal unsafe delegate void Action___IntPtr(__IntPtr __instance);
}

namespace Std
{
    namespace pair
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S_pair____N_std_S_shared_ptr____N_perlang_S_String___N_TokenType_E_TokenType
        {
            internal global::Std.SharedPtr.__Internal first;
            internal global::Perlang.TokenType second;
        }
    }

}
namespace Std
{
    namespace Deque
    {
        [StructLayout(LayoutKind.Sequential, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_deque____N_std_S_pair____N_std_S_shared_ptr____N_perlang_S_String___N_TokenType_E_TokenType___N_std_S_allocator__S0_
        {
            internal global::Std.DequeBase.DequeImpl.__Internalc__N_std_S__Deque_base____N_std_S_pair____N_std_S_shared_ptr____N_perlang_S_String___N_TokenType_E_TokenType___N_std_S_allocator__S0_ _M_impl;
        }
    }

}
namespace Std
{
    namespace DequeBase
    {
        [StructLayout(LayoutKind.Sequential, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S__Deque_base____N_std_S_pair____N_std_S_shared_ptr____N_perlang_S_String___N_TokenType_E_TokenType___N_std_S_allocator__S0_
        {
            internal global::Std.DequeBase.DequeImpl.__Internalc__N_std_S__Deque_base____N_std_S_pair____N_std_S_shared_ptr____N_perlang_S_String___N_TokenType_E_TokenType___N_std_S_allocator__S0_ _M_impl;
        }

        namespace DequeImpl
        {
            [StructLayout(LayoutKind.Sequential, Size = 80)]
            public unsafe partial struct __Internalc__N_std_S__Deque_base____N_std_S_pair____N_std_S_shared_ptr____N_perlang_S_String___N_TokenType_E_TokenType___N_std_S_allocator__S0_
            {
                internal __IntPtr _M_map;
                internal ulong _M_map_size;
                internal global::Std.DequeIterator.__Internalc__N_std_S__Deque_iterator____N_std_S_pair____N_std_S_shared_ptr____N_perlang_S_String___N_TokenType_E_TokenType__S0___S0_ _M_start;
                internal global::Std.DequeIterator.__Internalc__N_std_S__Deque_iterator____N_std_S_pair____N_std_S_shared_ptr____N_perlang_S_String___N_TokenType_E_TokenType__S0___S0_ _M_finish;
            }

        }

        namespace DequeImplData
        {
            [StructLayout(LayoutKind.Sequential, Size = 80)]
            public unsafe partial struct __Internalc__N_std_S__Deque_base____N_std_S_pair____N_std_S_shared_ptr____N_perlang_S_String___N_TokenType_E_TokenType___N_std_S_allocator__S0_
            {
                internal __IntPtr _M_map;
                internal ulong _M_map_size;
                internal global::Std.DequeIterator.__Internalc__N_std_S__Deque_iterator____N_std_S_pair____N_std_S_shared_ptr____N_perlang_S_String___N_TokenType_E_TokenType__S0___S0_ _M_start;
                internal global::Std.DequeIterator.__Internalc__N_std_S__Deque_iterator____N_std_S_pair____N_std_S_shared_ptr____N_perlang_S_String___N_TokenType_E_TokenType__S0___S0_ _M_finish;
            }
        }

    }

}
namespace Tsl
{
    namespace DetailOrderedHash
    {
        namespace OrderedHash
        {
            [StructLayout(LayoutKind.Sequential, Size = 136)]
            public unsafe partial struct __Internalc__N_tsl_N_detail_ordered_hash_S_ordered_hash____N_std_S_pair____N_std_S_shared_ptr____N_perlang_S_String___N_TokenType_E_TokenType___N_tsl_S_ordered_map__S1__S3____S_string_hasher___S_string_comparer___N_std_S_allocator__S0____N_std_S_deque__S0__S7__i_S_KeySelect___N_tsl_S_ordered_map__S1__S3__S5__S6__S7__S8__i_S_ValueSelect_S5__S6__S7__S8__i
            {
                internal global::Std.Vector.__Internal m_buckets_data;
                internal __IntPtr m_buckets;
                internal ulong m_hash_mask;
                internal global::Std.Deque.__Internalc__N_std_S_deque____N_std_S_pair____N_std_S_shared_ptr____N_perlang_S_String___N_TokenType_E_TokenType___N_std_S_allocator__S0_ m_values;
                internal ulong m_load_threshold;
                internal float m_max_load_factor;
                internal byte m_grow_on_next_insert;
            }
        }

    }
}
namespace Tsl
{
    namespace OrderedMap
    {
        [StructLayout(LayoutKind.Sequential, Size = 136)]
        public unsafe partial struct __Internalc__N_tsl_S_ordered_map____N_std_S_shared_ptr____N_perlang_S_String___N_TokenType_E_TokenType___S_string_hasher___S_string_comparer___N_std_S_allocator____N_std_S_pair__S0__S2____N_std_S_deque__S6__S5__i
        {
            internal global::Tsl.DetailOrderedHash.OrderedHash.__Internalc__N_tsl_N_detail_ordered_hash_S_ordered_hash____N_std_S_pair____N_std_S_shared_ptr____N_perlang_S_String___N_TokenType_E_TokenType___N_tsl_S_ordered_map__S1__S3____S_string_hasher___S_string_comparer___N_std_S_allocator__S0____N_std_S_deque__S0__S7__i_S_KeySelect___N_tsl_S_ordered_map__S1__S3__S5__S6__S7__S8__i_S_ValueSelect_S5__S6__S7__S8__i m_ht;
        }

        namespace KeySelect
        {
            [StructLayout(LayoutKind.Sequential, Size = 1)]
            public unsafe partial struct __Internal
            {
            }
        }

    }
}
